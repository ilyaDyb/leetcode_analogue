+ extend models
    + add type

- Connect to Postgresql

+ extend README.md (add image with app's architecture)
+ set up celery

- write frontend (https://github.com/ilyaDyb/leetcode_analogue_frontend.git)
    + page of problems 
    + page of single problem
    - profile with statistics
    + - switching from problem to results

- new APIs:
    + user profile
    - load testcases from csv and mb xlsx

+ caching:
    + save serialized queryset result in cache
    + update data when a new problem is added with Django signal

+ figure out how to keep data's
+ make a convenient API for getting/changing/creating test cases
- maybe even use parsing user's some txt or csv files for creating testcases

- add microservise for compiling user's code in docker contrainer
    + recieving code (need test)
    + sending results
    + proccessing results
    - + execution time and memory for test cases (memory needed)
    + saving solutions and checking task's progress
    - good processing of test case results:
        + raise exception
        + proccess different types (need test)
        + returning failed testcase
        - something else
    - make it more security:
        - handle dangerous code correctly
        + block imports
        - limit resources


+ add main app in docker container with docker-compose:
    + starting API
    + starting celery
    + connecting to another container